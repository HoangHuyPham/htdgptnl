// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using be.Contexts;

#nullable disable

namespace be.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("be.Models.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PerformanceEvaluationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Stretch")
                        .HasColumnType("real");

                    b.Property<float>("Target")
                        .HasColumnType("real");

                    b.Property<float>("Threshold")
                        .HasColumnType("real");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("PerformanceEvaluationId");

                    b.ToTable("Achievements");

                    b.HasData(
                        new
                        {
                            Id = new Guid("31f75965-3202-43fe-a0ce-722ed32097dc"),
                            Name = "Core Value",
                            PerformanceEvaluationId = new Guid("008000f6-186b-4ae9-a543-8b628a99f0d5"),
                            Stretch = 120f,
                            Target = 100f,
                            Threshold = 80f,
                            Weight = 20f
                        });
                });

            modelBuilder.Entity("be.Models.AchievementItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AchievementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Stretch")
                        .HasColumnType("real");

                    b.Property<float>("Target")
                        .HasColumnType("real");

                    b.Property<float>("Threshold")
                        .HasColumnType("real");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AchievementId");

                    b.ToTable("AchievementItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11d4dc49-5ede-4a3b-97c3-c1d55f52d4ab"),
                            AchievementId = new Guid("31f75965-3202-43fe-a0ce-722ed32097dc"),
                            Name = "Care",
                            Stretch = 120f,
                            Target = 100f,
                            Threshold = 80f,
                            Weight = 25f
                        },
                        new
                        {
                            Id = new Guid("7ff51df4-fb6c-42a1-8ae2-ec95c73a4d9b"),
                            AchievementId = new Guid("31f75965-3202-43fe-a0ce-722ed32097dc"),
                            Name = "Accountability",
                            Stretch = 120f,
                            Target = 100f,
                            Threshold = 80f,
                            Weight = 25f
                        },
                        new
                        {
                            Id = new Guid("a7e52710-6b0e-4f84-8eef-f9ce7c5673ee"),
                            AchievementId = new Guid("31f75965-3202-43fe-a0ce-722ed32097dc"),
                            Name = "Resilience",
                            Stretch = 120f,
                            Target = 100f,
                            Threshold = 80f,
                            Weight = 25f
                        },
                        new
                        {
                            Id = new Guid("50ca81f1-a54b-4375-aec9-cb1748915e0a"),
                            AchievementId = new Guid("31f75965-3202-43fe-a0ce-722ed32097dc"),
                            Name = "Elevating",
                            Stretch = 120f,
                            Target = 100f,
                            Threshold = 80f,
                            Weight = 25f
                        });
                });

            modelBuilder.Entity("be.Models.Criteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AchievementItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EvidenceRequired")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AchievementItemId");

                    b.ToTable("Criterias");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4f4cf4c8-0f66-47d2-aa9c-7de0192334cb"),
                            AchievementItemId = new Guid("11d4dc49-5ede-4a3b-97c3-c1d55f52d4ab"),
                            Content = "We believe that fundamentally, we are here to look after one another",
                            EvidenceRequired = false
                        },
                        new
                        {
                            Id = new Guid("7b2f3d1e-e943-4124-aa1a-a3b130ffda6f"),
                            AchievementItemId = new Guid("11d4dc49-5ede-4a3b-97c3-c1d55f52d4ab"),
                            Content = "We don't take ourselves too seriously and always follow the 'Golden Rule' of treating others like how you like to be treated;",
                            EvidenceRequired = false
                        },
                        new
                        {
                            Id = new Guid("3feb171f-d34f-44cc-9da5-2aa12e7aca9e"),
                            AchievementItemId = new Guid("11d4dc49-5ede-4a3b-97c3-c1d55f52d4ab"),
                            Content = "We believe in taking action every day, to help someone else.",
                            EvidenceRequired = false
                        },
                        new
                        {
                            Id = new Guid("a62c5d56-3685-47cd-939d-bcf097bfaddc"),
                            AchievementItemId = new Guid("7ff51df4-fb6c-42a1-8ae2-ec95c73a4d9b"),
                            Content = "We do what we say we'll do",
                            EvidenceRequired = false
                        },
                        new
                        {
                            Id = new Guid("15aa687e-6b33-467e-85a1-98ccf5f223f0"),
                            AchievementItemId = new Guid("7ff51df4-fb6c-42a1-8ae2-ec95c73a4d9b"),
                            Content = "We believe that whatever is rightly done, however humble, is noble",
                            EvidenceRequired = false
                        },
                        new
                        {
                            Id = new Guid("9963f4ee-530a-4b82-9768-555fe0e7e0e8"),
                            AchievementItemId = new Guid("7ff51df4-fb6c-42a1-8ae2-ec95c73a4d9b"),
                            Content = "We take responsibility for the impact we have & take small steps for a better world",
                            EvidenceRequired = false
                        },
                        new
                        {
                            Id = new Guid("461c0791-a865-446e-bf1d-3747e9124df7"),
                            AchievementItemId = new Guid("a7e52710-6b0e-4f84-8eef-f9ce7c5673ee"),
                            Content = "When times are tough, we have the courage to step up",
                            EvidenceRequired = false
                        },
                        new
                        {
                            Id = new Guid("945d2515-a459-409b-8101-70b95d8d8dd3"),
                            AchievementItemId = new Guid("a7e52710-6b0e-4f84-8eef-f9ce7c5673ee"),
                            Content = "We don't lose., we only win or learn",
                            EvidenceRequired = false
                        },
                        new
                        {
                            Id = new Guid("8ebb7393-978e-4702-a3a8-44d1ff3026b5"),
                            AchievementItemId = new Guid("a7e52710-6b0e-4f84-8eef-f9ce7c5673ee"),
                            Content = "We believe that together, we are stronger",
                            EvidenceRequired = false
                        },
                        new
                        {
                            Id = new Guid("3439bc1d-9b45-4ce5-ae3e-43f06afcfc50"),
                            AchievementItemId = new Guid("50ca81f1-a54b-4375-aec9-cb1748915e0a"),
                            Content = "We believe in making things better and the continuous pursuit of knowledge",
                            EvidenceRequired = false
                        },
                        new
                        {
                            Id = new Guid("a54c5654-bf80-49c8-bf81-5028c606a809"),
                            AchievementItemId = new Guid("50ca81f1-a54b-4375-aec9-cb1748915e0a"),
                            Content = "We believe in the direct link between developing our people, our community & our business",
                            EvidenceRequired = false
                        },
                        new
                        {
                            Id = new Guid("cc3d4106-c28a-4599-bceb-1234c53dc806"),
                            AchievementItemId = new Guid("50ca81f1-a54b-4375-aec9-cb1748915e0a"),
                            Content = "We are a meritocracy that believes in competency-based progression.",
                            EvidenceRequired = false
                        });
                });

            modelBuilder.Entity("be.Models.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("32eb03b8-0f09-4bde-88e0-11bb37e57585"),
                            Name = "Engineer"
                        },
                        new
                        {
                            Id = new Guid("24f691c4-5cef-4883-9c19-78d19d8b1c5b"),
                            Name = "Office"
                        });
                });

            modelBuilder.Entity("be.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupervisorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SupervisorId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("25600998-561b-4548-a17e-f12877319593"),
                            SupervisorId = new Guid("890172b4-aa4b-4079-8986-4c4269cda2f0"),
                            UserId = new Guid("2da351a9-f668-4d35-a057-7f67ad8ac550")
                        },
                        new
                        {
                            Id = new Guid("890172b4-aa4b-4079-8986-4c4269cda2f0"),
                            SupervisorId = new Guid("5b1b28c5-22a4-4052-909e-7d22de65c5da"),
                            UserId = new Guid("53f6e5c7-ad3f-4d4c-b8d9-4128a4d567bb")
                        },
                        new
                        {
                            Id = new Guid("5b1b28c5-22a4-4052-909e-7d22de65c5da"),
                            UserId = new Guid("819984b9-637e-41a5-bad8-970963a21222")
                        });
                });

            modelBuilder.Entity("be.Models.EmployeeDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Eligible")
                        .HasColumnType("bit");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GradeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OperationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PositionEId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("StartDate")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[EmployeeId] IS NOT NULL");

                    b.HasIndex("GradeId");

                    b.HasIndex("GroupId");

                    b.HasIndex("OperationId");

                    b.HasIndex("PlantId");

                    b.HasIndex("PositionEId");

                    b.HasIndex("ProcessId");

                    b.ToTable("EmployeeDetails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d01661c3-ccf5-4deb-9d33-e32fa699e65c"),
                            Code = "12345",
                            DepartmentId = new Guid("32eb03b8-0f09-4bde-88e0-11bb37e57585"),
                            Eligible = true,
                            EmployeeId = new Guid("25600998-561b-4548-a17e-f12877319593"),
                            FullName = "Nguyễn Văn A",
                            GradeId = new Guid("91cec208-1665-4d2f-ba4a-b479a6a94882"),
                            GroupId = new Guid("aaa03ed0-4c5d-402d-904a-5faf20b4397f"),
                            OperationId = new Guid("f9117a2d-3373-4b3f-a933-3ddab7dd6975"),
                            PlantId = new Guid("7836ded2-971e-4637-8b1b-be6b48df9ab7"),
                            PositionEId = new Guid("e8f7a96a-b600-48c5-8894-dbe78d52d7aa"),
                            ProcessId = new Guid("6a139eaa-4ad2-4c51-a31a-06d01d9dc982"),
                            StartDate = 1655830800L,
                            Type = "IDL"
                        },
                        new
                        {
                            Id = new Guid("1f509f21-5bb8-40fa-a697-d268dbd87ea9"),
                            Code = "12346",
                            DepartmentId = new Guid("32eb03b8-0f09-4bde-88e0-11bb37e57585"),
                            Eligible = true,
                            EmployeeId = new Guid("890172b4-aa4b-4079-8986-4c4269cda2f0"),
                            FullName = "Nguyễn Văn B",
                            GradeId = new Guid("bb7a56a7-396b-4e7a-bffb-e92e8a4c422b"),
                            GroupId = new Guid("aaa03ed0-4c5d-402d-904a-5faf20b4397f"),
                            OperationId = new Guid("f9117a2d-3373-4b3f-a933-3ddab7dd6975"),
                            PlantId = new Guid("4423e651-d2fd-4de4-bf0f-5b6bbf15d8d7"),
                            PositionEId = new Guid("e8f7a96a-b600-48c5-8894-dbe78d52d7aa"),
                            ProcessId = new Guid("6a139eaa-4ad2-4c51-a31a-06d01d9dc982"),
                            StartDate = 1695229200L,
                            Type = "IDL"
                        },
                        new
                        {
                            Id = new Guid("cec3d403-cdb1-44ae-8513-ca7e6f664135"),
                            Code = "12347",
                            DepartmentId = new Guid("32eb03b8-0f09-4bde-88e0-11bb37e57585"),
                            Eligible = true,
                            EmployeeId = new Guid("5b1b28c5-22a4-4052-909e-7d22de65c5da"),
                            FullName = "Nguyễn Văn C",
                            GradeId = new Guid("bb7a56a7-396b-4e7a-bffb-e92e8a4c422b"),
                            GroupId = new Guid("aaa03ed0-4c5d-402d-904a-5faf20b4397f"),
                            OperationId = new Guid("f9117a2d-3373-4b3f-a933-3ddab7dd6975"),
                            PlantId = new Guid("7836ded2-971e-4637-8b1b-be6b48df9ab7"),
                            PositionEId = new Guid("5ff0b3e2-7ec5-4bb3-9bba-06e64333e5d9"),
                            ProcessId = new Guid("6a139eaa-4ad2-4c51-a31a-06d01d9dc982"),
                            StartDate = 1714669200L,
                            Type = "IDL"
                        });
                });

            modelBuilder.Entity("be.Models.EvaluationSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("End")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsSelfEvalution")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PerformanceEvaluationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Start")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PerformanceEvaluationId");

                    b.HasIndex("RoleId");

                    b.ToTable("EvaluationSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0139d531-ab7d-4e5f-9d08-3bfe4d3747e5"),
                            CreatedAt = 1749204385L,
                            Description = "Vui lòng đánh giá trước hạn, đánh giá của bạn sẽ bị vô hiệu nếu quá hạn",
                            End = 1749463585L,
                            IsSelfEvalution = true,
                            PerformanceEvaluationId = new Guid("008000f6-186b-4ae9-a543-8b628a99f0d5"),
                            RoleId = new Guid("2a19b00a-8753-4d5f-937e-5f3a7815b554"),
                            Start = 1749204385L
                        },
                        new
                        {
                            Id = new Guid("f25c902f-193c-4cd7-9979-fbb1a326d59d"),
                            CreatedAt = 1749204385L,
                            Description = "Vui lòng đánh giá trước hạn, đánh giá của bạn sẽ bị vô hiệu nếu quá hạn",
                            End = 1749636385L,
                            IsSelfEvalution = false,
                            PerformanceEvaluationId = new Guid("008000f6-186b-4ae9-a543-8b628a99f0d5"),
                            RoleId = new Guid("05cf5ce9-8c60-425f-bebc-4c34841b9136"),
                            Start = 1749463585L
                        },
                        new
                        {
                            Id = new Guid("f38ba82c-f562-4b9f-a0a9-1e90e77c8c03"),
                            CreatedAt = 1749204385L,
                            Description = "Vui lòng đánh giá trước hạn, đánh giá của bạn sẽ bị vô hiệu nếu quá hạn",
                            End = 1749809185L,
                            IsSelfEvalution = false,
                            PerformanceEvaluationId = new Guid("008000f6-186b-4ae9-a543-8b628a99f0d5"),
                            RoleId = new Guid("6668daea-8563-4074-8cda-9886c93beecf"),
                            Start = 1749636385L
                        });
                });

            modelBuilder.Entity("be.Models.EvaluationScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("CriteriaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<Guid?>("SourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SourceId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TargetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("SourceId");

                    b.HasIndex("SourceId1");

                    b.ToTable("EvaluationScores");
                });

            modelBuilder.Entity("be.Models.Evidence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EvaluationScoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("EvidenceRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationScoreId");

                    b.ToTable("Evidences");
                });

            modelBuilder.Entity("be.Models.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            Id = new Guid("91cec208-1665-4d2f-ba4a-b479a6a94882"),
                            Name = "as1"
                        },
                        new
                        {
                            Id = new Guid("bb7a56a7-396b-4e7a-bffb-e92e8a4c422b"),
                            Name = "as2"
                        });
                });

            modelBuilder.Entity("be.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaa03ed0-4c5d-402d-904a-5faf20b4397f"),
                            Name = "Engineer"
                        },
                        new
                        {
                            Id = new Guid("760b93fe-5555-4eca-a7eb-d394838011f9"),
                            Name = "Costing"
                        });
                });

            modelBuilder.Entity("be.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EvidenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Size")
                        .HasColumnType("real");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EvidenceId")
                        .IsUnique()
                        .HasFilter("[EvidenceId] IS NOT NULL");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("be.Models.Operation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Operations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f9117a2d-3373-4b3f-a933-3ddab7dd6975"),
                            Name = "Engineer"
                        },
                        new
                        {
                            Id = new Guid("ea28b7df-6ec2-4f2f-bc1e-c7327b5a538b"),
                            Name = "Prototype"
                        });
                });

            modelBuilder.Entity("be.Models.PerformanceEvaluation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long>("End")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Start")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("PerformanceEvaluations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("008000f6-186b-4ae9-a543-8b628a99f0d5"),
                            CreatedAt = 1749204385L,
                            End = 1749809185L,
                            Name = "Don danh gia nhan vien 2025 (Behavior)",
                            Start = 1749204385L
                        });
                });

            modelBuilder.Entity("be.Models.Plant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Plants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7836ded2-971e-4637-8b1b-be6b48df9ab7"),
                            Name = "plant 1"
                        },
                        new
                        {
                            Id = new Guid("4423e651-d2fd-4de4-bf0f-5b6bbf15d8d7"),
                            Name = "plant 2"
                        });
                });

            modelBuilder.Entity("be.Models.PositionE", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PositionEs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8f7a96a-b600-48c5-8894-dbe78d52d7aa"),
                            Name = "Casegoods Drafter"
                        },
                        new
                        {
                            Id = new Guid("5ff0b3e2-7ec5-4bb3-9bba-06e64333e5d9"),
                            Name = "Casegoods Drafter Team Leader"
                        });
                });

            modelBuilder.Entity("be.Models.Process", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Processs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a139eaa-4ad2-4c51-a31a-06d01d9dc982"),
                            Name = "Engineer"
                        },
                        new
                        {
                            Id = new Guid("09db74b3-11eb-4eeb-88e0-2f2c58d3ce49"),
                            Name = "Prototype"
                        });
                });

            modelBuilder.Entity("be.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a19b00a-8753-4d5f-937e-5f3a7815b554"),
                            Description = "No description",
                            Level = 0,
                            Name = "Staff"
                        },
                        new
                        {
                            Id = new Guid("05cf5ce9-8c60-425f-bebc-4c34841b9136"),
                            Description = "No description",
                            Level = 1,
                            Name = "LineManager"
                        },
                        new
                        {
                            Id = new Guid("6668daea-8563-4074-8cda-9886c93beecf"),
                            Description = "No description",
                            Level = 2,
                            Name = "Director"
                        },
                        new
                        {
                            Id = new Guid("9dc56b9f-5646-4296-bfd8-ab7c9bf9fe86"),
                            Description = "No description",
                            Level = 3,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("be.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2da351a9-f668-4d35-a057-7f67ad8ac550"),
                            Email = "",
                            Password = "$2a$11$1JY3Q.mRHET2IKG3Squ6reEPEBul8a6N52Rqn5LMDgfQK9TeMJqdq",
                            Phone = "123456789",
                            RoleId = new Guid("2a19b00a-8753-4d5f-937e-5f3a7815b554"),
                            UserName = "nhanvien1"
                        },
                        new
                        {
                            Id = new Guid("53f6e5c7-ad3f-4d4c-b8d9-4128a4d567bb"),
                            Email = "quanly1@gmail.com",
                            Password = "$2a$11$k9bkfbp88ObCtUCurk.IL.n0ma20D4oMXNCGxnfe7fwcNMWqOm9wq",
                            Phone = "123456789",
                            RoleId = new Guid("05cf5ce9-8c60-425f-bebc-4c34841b9136"),
                            UserName = "quanly1"
                        },
                        new
                        {
                            Id = new Guid("819984b9-637e-41a5-bad8-970963a21222"),
                            Email = "giamdoc1@gmail.com",
                            Password = "$2a$11$QH2UBrl9S0fw.ytc2y4KIOtIgfDziJuDaaT/p1mJxUD/8nWOpRbE6",
                            Phone = "123456789",
                            RoleId = new Guid("6668daea-8563-4074-8cda-9886c93beecf"),
                            UserName = "giamdoc1"
                        });
                });

            modelBuilder.Entity("be.Models.ValidationToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ValidationTokens");
                });

            modelBuilder.Entity("be.Models.WorkingDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActualWorkingDay")
                        .HasColumnType("int");

                    b.Property<Guid?>("EmployeeDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Hoic")
                        .HasColumnType("int");

                    b.Property<int>("Maternity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Np")
                        .HasColumnType("int");

                    b.Property<int>("Pv")
                        .HasColumnType("int");

                    b.Property<int>("StandardWorkingDay")
                        .HasColumnType("int");

                    b.Property<int>("Suspension")
                        .HasColumnType("int");

                    b.Property<int>("Verbal")
                        .HasColumnType("int");

                    b.Property<int>("Written")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeDetailId")
                        .IsUnique()
                        .HasFilter("[EmployeeDetailId] IS NOT NULL");

                    b.ToTable("WorkingDetails");
                });

            modelBuilder.Entity("be.Models.Achievement", b =>
                {
                    b.HasOne("be.Models.PerformanceEvaluation", "PerformanceEvaluation")
                        .WithMany("Achievements")
                        .HasForeignKey("PerformanceEvaluationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("PerformanceEvaluation");
                });

            modelBuilder.Entity("be.Models.AchievementItem", b =>
                {
                    b.HasOne("be.Models.Achievement", "Achievement")
                        .WithMany("AchievementItems")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Achievement");
                });

            modelBuilder.Entity("be.Models.Criteria", b =>
                {
                    b.HasOne("be.Models.AchievementItem", "AchievementItem")
                        .WithMany("Criterias")
                        .HasForeignKey("AchievementItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AchievementItem");
                });

            modelBuilder.Entity("be.Models.Employee", b =>
                {
                    b.HasOne("be.Models.Employee", "Supervisor")
                        .WithMany("Employees")
                        .HasForeignKey("SupervisorId");

                    b.HasOne("be.Models.User", "User")
                        .WithOne("Employee")
                        .HasForeignKey("be.Models.Employee", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Supervisor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("be.Models.EmployeeDetail", b =>
                {
                    b.HasOne("be.Models.Department", "Department")
                        .WithMany("EmployeeDetails")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("be.Models.Employee", "Employee")
                        .WithOne("Detail")
                        .HasForeignKey("be.Models.EmployeeDetail", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("be.Models.Grade", "Grade")
                        .WithMany("EmployeeDetails")
                        .HasForeignKey("GradeId");

                    b.HasOne("be.Models.Group", "Group")
                        .WithMany("EmployeeDetails")
                        .HasForeignKey("GroupId");

                    b.HasOne("be.Models.Operation", "Operation")
                        .WithMany("EmployeeDetails")
                        .HasForeignKey("OperationId");

                    b.HasOne("be.Models.Plant", "Plant")
                        .WithMany("EmployeeDetails")
                        .HasForeignKey("PlantId");

                    b.HasOne("be.Models.PositionE", "PositionE")
                        .WithMany("EmployeeDetails")
                        .HasForeignKey("PositionEId");

                    b.HasOne("be.Models.Process", "Process")
                        .WithMany("EmployeeDetails")
                        .HasForeignKey("ProcessId");

                    b.Navigation("Department");

                    b.Navigation("Employee");

                    b.Navigation("Grade");

                    b.Navigation("Group");

                    b.Navigation("Operation");

                    b.Navigation("Plant");

                    b.Navigation("PositionE");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("be.Models.EvaluationSchedule", b =>
                {
                    b.HasOne("be.Models.PerformanceEvaluation", "PerformanceEvaluation")
                        .WithMany("EvaluationSchedules")
                        .HasForeignKey("PerformanceEvaluationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("be.Models.Role", "Role")
                        .WithMany("EvaluationSchedules")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("PerformanceEvaluation");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("be.Models.EvaluationScore", b =>
                {
                    b.HasOne("be.Models.Criteria", "Criteria")
                        .WithMany("EvaluationScores")
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("be.Models.User", "Target")
                        .WithMany("EvaluationScoreTargets")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("be.Models.User", "Source")
                        .WithMany("EvaluationScoreSources")
                        .HasForeignKey("SourceId1");

                    b.Navigation("Criteria");

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("be.Models.Evidence", b =>
                {
                    b.HasOne("be.Models.EvaluationScore", "EvaluationScore")
                        .WithMany("Evidences")
                        .HasForeignKey("EvaluationScoreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("EvaluationScore");
                });

            modelBuilder.Entity("be.Models.Image", b =>
                {
                    b.HasOne("be.Models.Evidence", "Evidence")
                        .WithOne("Image")
                        .HasForeignKey("be.Models.Image", "EvidenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Evidence");
                });

            modelBuilder.Entity("be.Models.User", b =>
                {
                    b.HasOne("be.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("be.Models.WorkingDetail", b =>
                {
                    b.HasOne("be.Models.EmployeeDetail", "EmployeeDetail")
                        .WithOne("WorkingDetail")
                        .HasForeignKey("be.Models.WorkingDetail", "EmployeeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("EmployeeDetail");
                });

            modelBuilder.Entity("be.Models.Achievement", b =>
                {
                    b.Navigation("AchievementItems");
                });

            modelBuilder.Entity("be.Models.AchievementItem", b =>
                {
                    b.Navigation("Criterias");
                });

            modelBuilder.Entity("be.Models.Criteria", b =>
                {
                    b.Navigation("EvaluationScores");
                });

            modelBuilder.Entity("be.Models.Department", b =>
                {
                    b.Navigation("EmployeeDetails");
                });

            modelBuilder.Entity("be.Models.Employee", b =>
                {
                    b.Navigation("Detail");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("be.Models.EmployeeDetail", b =>
                {
                    b.Navigation("WorkingDetail");
                });

            modelBuilder.Entity("be.Models.EvaluationScore", b =>
                {
                    b.Navigation("Evidences");
                });

            modelBuilder.Entity("be.Models.Evidence", b =>
                {
                    b.Navigation("Image");
                });

            modelBuilder.Entity("be.Models.Grade", b =>
                {
                    b.Navigation("EmployeeDetails");
                });

            modelBuilder.Entity("be.Models.Group", b =>
                {
                    b.Navigation("EmployeeDetails");
                });

            modelBuilder.Entity("be.Models.Operation", b =>
                {
                    b.Navigation("EmployeeDetails");
                });

            modelBuilder.Entity("be.Models.PerformanceEvaluation", b =>
                {
                    b.Navigation("Achievements");

                    b.Navigation("EvaluationSchedules");
                });

            modelBuilder.Entity("be.Models.Plant", b =>
                {
                    b.Navigation("EmployeeDetails");
                });

            modelBuilder.Entity("be.Models.PositionE", b =>
                {
                    b.Navigation("EmployeeDetails");
                });

            modelBuilder.Entity("be.Models.Process", b =>
                {
                    b.Navigation("EmployeeDetails");
                });

            modelBuilder.Entity("be.Models.Role", b =>
                {
                    b.Navigation("EvaluationSchedules");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("be.Models.User", b =>
                {
                    b.Navigation("Employee");

                    b.Navigation("EvaluationScoreSources");

                    b.Navigation("EvaluationScoreTargets");
                });
#pragma warning restore 612, 618
        }
    }
}
