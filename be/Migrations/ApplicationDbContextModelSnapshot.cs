// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using be.Contexts;

#nullable disable

namespace be.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("be.Models.Archievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PerformanceEvaluationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("TotalWeight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("PerformanceEvaluationId");

                    b.ToTable("Archievements");
                });

            modelBuilder.Entity("be.Models.ArchievementItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArchievementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArchivementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Stretch")
                        .HasColumnType("real");

                    b.Property<float>("Target")
                        .HasColumnType("real");

                    b.Property<float>("Threshold")
                        .HasColumnType("real");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ArchievementId");

                    b.ToTable("ArchievementItems");
                });

            modelBuilder.Entity("be.Models.BalanceScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("HowScale")
                        .HasColumnType("float");

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("WhatScale")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PositionId")
                        .IsUnique()
                        .HasFilter("[PositionId] IS NOT NULL");

                    b.ToTable("BalanceScores");
                });

            modelBuilder.Entity("be.Models.BellCurveScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[EmployeeId] IS NOT NULL");

                    b.ToTable("BellCurveScores");
                });

            modelBuilder.Entity("be.Models.Criteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArchievementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArchievementItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArchivementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EvaluateScoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ProofRequired")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ArchievementId");

                    b.HasIndex("ArchievementItemId");

                    b.HasIndex("EvaluateScoreId")
                        .IsUnique()
                        .HasFilter("[EvaluateScoreId] IS NOT NULL");

                    b.ToTable("Criterias");
                });

            modelBuilder.Entity("be.Models.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[EmployeeId] IS NOT NULL");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("be.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("be.Models.EmployeeDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEligible")
                        .HasColumnType("bit");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[EmployeeId] IS NOT NULL");

                    b.ToTable("EmployeeDetails");
                });

            modelBuilder.Entity("be.Models.EvaluateScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeEvaluateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeEvaluateId");

                    b.ToTable("EvaluateScores");
                });

            modelBuilder.Entity("be.Models.EvaluationSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EvaluationSchedules");
                });

            modelBuilder.Entity("be.Models.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[EmployeeId] IS NOT NULL");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("be.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("be.Models.Operation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[EmployeeId] IS NOT NULL");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("be.Models.PerformanceEvaluation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EvaluationScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationScheduleId")
                        .IsUnique()
                        .HasFilter("[EvaluationScheduleId] IS NOT NULL");

                    b.ToTable("PerformanceEvaluations");
                });

            modelBuilder.Entity("be.Models.Plant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[EmployeeId] IS NOT NULL");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("be.Models.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("be.Models.PositionEs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("PositionEss");
                });

            modelBuilder.Entity("be.Models.Process", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[EmployeeId] IS NOT NULL");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("be.Models.ProofImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProofCriteriaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("ProofCriteriaId");

                    b.ToTable("ProofImages");
                });

            modelBuilder.Entity("be.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EvaluationScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationScheduleId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("be.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[EmployeeId] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("be.Models.WorkingDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Actual")
                        .HasColumnType("int");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Hoic")
                        .HasColumnType("int");

                    b.Property<int>("Maternity")
                        .HasColumnType("int");

                    b.Property<int>("Np")
                        .HasColumnType("int");

                    b.Property<int>("Pv")
                        .HasColumnType("int");

                    b.Property<int>("Standard")
                        .HasColumnType("int");

                    b.Property<int>("Suspension")
                        .HasColumnType("int");

                    b.Property<int>("Verbal")
                        .HasColumnType("int");

                    b.Property<int>("Written")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[EmployeeId] IS NOT NULL");

                    b.ToTable("WorkingDetails");
                });

            modelBuilder.Entity("be.Models.Archievement", b =>
                {
                    b.HasOne("be.Models.PerformanceEvaluation", "PerformanceEvaluation")
                        .WithMany("Archievements")
                        .HasForeignKey("PerformanceEvaluationId");

                    b.Navigation("PerformanceEvaluation");
                });

            modelBuilder.Entity("be.Models.ArchievementItem", b =>
                {
                    b.HasOne("be.Models.Archievement", "Archievement")
                        .WithMany("ArchivementItems")
                        .HasForeignKey("ArchievementId");

                    b.Navigation("Archievement");
                });

            modelBuilder.Entity("be.Models.BalanceScore", b =>
                {
                    b.HasOne("be.Models.Position", "Position")
                        .WithOne("BalanceScore")
                        .HasForeignKey("be.Models.BalanceScore", "PositionId");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("be.Models.BellCurveScore", b =>
                {
                    b.HasOne("be.Models.Employee", "Employee")
                        .WithOne("BellCurveScore")
                        .HasForeignKey("be.Models.BellCurveScore", "EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("be.Models.Criteria", b =>
                {
                    b.HasOne("be.Models.Archievement", "Archievement")
                        .WithMany()
                        .HasForeignKey("ArchievementId");

                    b.HasOne("be.Models.ArchievementItem", null)
                        .WithMany("Criterias")
                        .HasForeignKey("ArchievementItemId");

                    b.HasOne("be.Models.EvaluateScore", "EvaluateScore")
                        .WithOne("Criteria")
                        .HasForeignKey("be.Models.Criteria", "EvaluateScoreId");

                    b.Navigation("Archievement");

                    b.Navigation("EvaluateScore");
                });

            modelBuilder.Entity("be.Models.Department", b =>
                {
                    b.HasOne("be.Models.Employee", "Employee")
                        .WithOne("Department")
                        .HasForeignKey("be.Models.Department", "EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("be.Models.Employee", b =>
                {
                    b.HasOne("be.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("be.Models.EmployeeDetail", b =>
                {
                    b.HasOne("be.Models.Employee", "Employee")
                        .WithOne("EmployeeDetail")
                        .HasForeignKey("be.Models.EmployeeDetail", "EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("be.Models.EvaluateScore", b =>
                {
                    b.HasOne("be.Models.Employee", "EmployeeEvaluate")
                        .WithMany("EvaluateScores")
                        .HasForeignKey("EmployeeEvaluateId");

                    b.Navigation("EmployeeEvaluate");
                });

            modelBuilder.Entity("be.Models.Grade", b =>
                {
                    b.HasOne("be.Models.Employee", "Employee")
                        .WithOne("Grade")
                        .HasForeignKey("be.Models.Grade", "EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("be.Models.Operation", b =>
                {
                    b.HasOne("be.Models.Employee", "Employee")
                        .WithOne("Operation")
                        .HasForeignKey("be.Models.Operation", "EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("be.Models.PerformanceEvaluation", b =>
                {
                    b.HasOne("be.Models.EvaluationSchedule", "EvaluationSchedule")
                        .WithOne("PerformanceEvaluation")
                        .HasForeignKey("be.Models.PerformanceEvaluation", "EvaluationScheduleId");

                    b.Navigation("EvaluationSchedule");
                });

            modelBuilder.Entity("be.Models.Plant", b =>
                {
                    b.HasOne("be.Models.Employee", "Employee")
                        .WithOne("Plant")
                        .HasForeignKey("be.Models.Plant", "EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("be.Models.PositionEs", b =>
                {
                    b.HasOne("be.Models.Position", "Position")
                        .WithMany("PositionEss")
                        .HasForeignKey("PositionId");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("be.Models.Process", b =>
                {
                    b.HasOne("be.Models.Employee", "Employee")
                        .WithOne("Process")
                        .HasForeignKey("be.Models.Process", "EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("be.Models.ProofImage", b =>
                {
                    b.HasOne("be.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("be.Models.Criteria", "ProofCriteria")
                        .WithMany("ProofImages")
                        .HasForeignKey("ProofCriteriaId");

                    b.Navigation("Image");

                    b.Navigation("ProofCriteria");
                });

            modelBuilder.Entity("be.Models.Role", b =>
                {
                    b.HasOne("be.Models.EvaluationSchedule", "EvaluationSchedule")
                        .WithMany("Roles")
                        .HasForeignKey("EvaluationScheduleId");

                    b.HasOne("be.Models.User", "User")
                        .WithOne("Role")
                        .HasForeignKey("be.Models.Role", "UserId");

                    b.Navigation("EvaluationSchedule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("be.Models.User", b =>
                {
                    b.HasOne("be.Models.Employee", null)
                        .WithOne("User")
                        .HasForeignKey("be.Models.User", "EmployeeId");
                });

            modelBuilder.Entity("be.Models.WorkingDetail", b =>
                {
                    b.HasOne("be.Models.Employee", "Employee")
                        .WithOne("WorkingDetail")
                        .HasForeignKey("be.Models.WorkingDetail", "EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("be.Models.Archievement", b =>
                {
                    b.Navigation("ArchivementItems");
                });

            modelBuilder.Entity("be.Models.ArchievementItem", b =>
                {
                    b.Navigation("Criterias");
                });

            modelBuilder.Entity("be.Models.Criteria", b =>
                {
                    b.Navigation("ProofImages");
                });

            modelBuilder.Entity("be.Models.Employee", b =>
                {
                    b.Navigation("BellCurveScore");

                    b.Navigation("Department");

                    b.Navigation("EmployeeDetail");

                    b.Navigation("EvaluateScores");

                    b.Navigation("Grade");

                    b.Navigation("Operation");

                    b.Navigation("Plant");

                    b.Navigation("Process");

                    b.Navigation("User");

                    b.Navigation("WorkingDetail");
                });

            modelBuilder.Entity("be.Models.EvaluateScore", b =>
                {
                    b.Navigation("Criteria");
                });

            modelBuilder.Entity("be.Models.EvaluationSchedule", b =>
                {
                    b.Navigation("PerformanceEvaluation");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("be.Models.PerformanceEvaluation", b =>
                {
                    b.Navigation("Archievements");
                });

            modelBuilder.Entity("be.Models.Position", b =>
                {
                    b.Navigation("BalanceScore");

                    b.Navigation("PositionEss");
                });

            modelBuilder.Entity("be.Models.User", b =>
                {
                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
