// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using be.Contexts;

#nullable disable

namespace be.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250515071402_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("be.Models.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PerformanceEvaluationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("TotalWeight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("PerformanceEvaluationId");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("be.Models.AchievementItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AchievementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Stretch")
                        .HasColumnType("real");

                    b.Property<float>("Target")
                        .HasColumnType("real");

                    b.Property<float>("Threshold")
                        .HasColumnType("real");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AchievementId");

                    b.ToTable("AchievementItems");
                });

            modelBuilder.Entity("be.Models.BalanceScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("HowScale")
                        .HasColumnType("float");

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("WhatScale")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PositionId")
                        .IsUnique()
                        .HasFilter("[PositionId] IS NOT NULL");

                    b.ToTable("BalanceScores");
                });

            modelBuilder.Entity("be.Models.BellCurveScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("BellCurveScores");
                });

            modelBuilder.Entity("be.Models.Criteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AchievementItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ProofRequired")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AchievementItemId");

                    b.ToTable("Criterias");
                });

            modelBuilder.Entity("be.Models.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("be.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("BellCurveScore")
                        .HasColumnType("real");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GradeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OperationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WorkingDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("GradeId");

                    b.HasIndex("OperationId");

                    b.HasIndex("PlantId");

                    b.HasIndex("PositionId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("WorkingDetailId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("be.Models.EmployeeDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEligible")
                        .HasColumnType("bit");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId1");

                    b.ToTable("EmployeeDetails");
                });

            modelBuilder.Entity("be.Models.EvaluateScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CriteriaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("Score")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EvaluateScores");
                });

            modelBuilder.Entity("be.Models.EvaluationSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EvaluationSchedules");
                });

            modelBuilder.Entity("be.Models.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("be.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("be.Models.Operation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("be.Models.PerformanceEvaluation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EvaluationScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationScheduleId")
                        .IsUnique()
                        .HasFilter("[EvaluationScheduleId] IS NOT NULL");

                    b.ToTable("PerformanceEvaluations");
                });

            modelBuilder.Entity("be.Models.Plant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("be.Models.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("be.Models.PositionEs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("PositionEss");
                });

            modelBuilder.Entity("be.Models.Process", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("be.Models.ProofImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EvaluateScoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EvaluateScoreId");

                    b.HasIndex("ImageId")
                        .IsUnique()
                        .HasFilter("[ImageId] IS NOT NULL");

                    b.ToTable("ProofImages");
                });

            modelBuilder.Entity("be.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EvaluationScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationScheduleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("be.Models.RoleEvaluationSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EvaluationScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationScheduleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleEvaluationSchedules");
                });

            modelBuilder.Entity("be.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[EmployeeId] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("be.Models.WorkingDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Actual")
                        .HasColumnType("int");

                    b.Property<int>("Hoic")
                        .HasColumnType("int");

                    b.Property<int>("Maternity")
                        .HasColumnType("int");

                    b.Property<int>("Np")
                        .HasColumnType("int");

                    b.Property<int>("Pv")
                        .HasColumnType("int");

                    b.Property<int>("Standard")
                        .HasColumnType("int");

                    b.Property<int>("Suspension")
                        .HasColumnType("int");

                    b.Property<int>("Verbal")
                        .HasColumnType("int");

                    b.Property<int>("Written")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WorkingDetails");
                });

            modelBuilder.Entity("be.Models.Achievement", b =>
                {
                    b.HasOne("be.Models.PerformanceEvaluation", "PerformanceEvaluation")
                        .WithMany("Achievements")
                        .HasForeignKey("PerformanceEvaluationId");

                    b.Navigation("PerformanceEvaluation");
                });

            modelBuilder.Entity("be.Models.AchievementItem", b =>
                {
                    b.HasOne("be.Models.Achievement", "Achievement")
                        .WithMany("AchivementItems")
                        .HasForeignKey("AchievementId");

                    b.Navigation("Achievement");
                });

            modelBuilder.Entity("be.Models.BalanceScore", b =>
                {
                    b.HasOne("be.Models.Position", "Position")
                        .WithOne("BalanceScore")
                        .HasForeignKey("be.Models.BalanceScore", "PositionId");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("be.Models.BellCurveScore", b =>
                {
                    b.HasOne("be.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("be.Models.Criteria", b =>
                {
                    b.HasOne("be.Models.AchievementItem", "AchievementItem")
                        .WithMany("Criterias")
                        .HasForeignKey("AchievementItemId");

                    b.Navigation("AchievementItem");
                });

            modelBuilder.Entity("be.Models.Employee", b =>
                {
                    b.HasOne("be.Models.Department", null)
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("be.Models.Grade", null)
                        .WithMany("Employees")
                        .HasForeignKey("GradeId");

                    b.HasOne("be.Models.Operation", null)
                        .WithMany("Employees")
                        .HasForeignKey("OperationId");

                    b.HasOne("be.Models.Plant", null)
                        .WithMany("Employees")
                        .HasForeignKey("PlantId");

                    b.HasOne("be.Models.Position", null)
                        .WithMany("Employees")
                        .HasForeignKey("PositionId");

                    b.HasOne("be.Models.Process", null)
                        .WithMany("Employees")
                        .HasForeignKey("ProcessId");

                    b.HasOne("be.Models.WorkingDetail", null)
                        .WithMany("Employees")
                        .HasForeignKey("WorkingDetailId");
                });

            modelBuilder.Entity("be.Models.EmployeeDetail", b =>
                {
                    b.HasOne("be.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId1");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("be.Models.EvaluateScore", b =>
                {
                    b.HasOne("be.Models.Criteria", "Criteria")
                        .WithMany("EvaluateScores")
                        .HasForeignKey("CriteriaId");

                    b.HasOne("be.Models.Employee", "EmployeeEvaluate")
                        .WithMany("EvaluateScores")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Criteria");

                    b.Navigation("EmployeeEvaluate");
                });

            modelBuilder.Entity("be.Models.PerformanceEvaluation", b =>
                {
                    b.HasOne("be.Models.EvaluationSchedule", "EvaluationSchedule")
                        .WithOne("PerformanceEvaluation")
                        .HasForeignKey("be.Models.PerformanceEvaluation", "EvaluationScheduleId");

                    b.Navigation("EvaluationSchedule");
                });

            modelBuilder.Entity("be.Models.PositionEs", b =>
                {
                    b.HasOne("be.Models.Position", "Position")
                        .WithMany("PositionEss")
                        .HasForeignKey("PositionId");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("be.Models.ProofImage", b =>
                {
                    b.HasOne("be.Models.EvaluateScore", "EvaluateScore")
                        .WithMany("ProofImages")
                        .HasForeignKey("EvaluateScoreId");

                    b.HasOne("be.Models.Image", "Image")
                        .WithOne("ProofImage")
                        .HasForeignKey("be.Models.ProofImage", "ImageId");

                    b.Navigation("EvaluateScore");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("be.Models.Role", b =>
                {
                    b.HasOne("be.Models.EvaluationSchedule", null)
                        .WithMany("Roles")
                        .HasForeignKey("EvaluationScheduleId");
                });

            modelBuilder.Entity("be.Models.RoleEvaluationSchedule", b =>
                {
                    b.HasOne("be.Models.EvaluationSchedule", "EvaluationSchedule")
                        .WithMany("RoleEvaluationSchedules")
                        .HasForeignKey("EvaluationScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("be.Models.Role", "Role")
                        .WithMany("RoleEvaluationSchedules")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvaluationSchedule");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("be.Models.User", b =>
                {
                    b.HasOne("be.Models.Employee", null)
                        .WithOne("User")
                        .HasForeignKey("be.Models.User", "EmployeeId");

                    b.HasOne("be.Models.Role", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("be.Models.Achievement", b =>
                {
                    b.Navigation("AchivementItems");
                });

            modelBuilder.Entity("be.Models.AchievementItem", b =>
                {
                    b.Navigation("Criterias");
                });

            modelBuilder.Entity("be.Models.Criteria", b =>
                {
                    b.Navigation("EvaluateScores");
                });

            modelBuilder.Entity("be.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("be.Models.Employee", b =>
                {
                    b.Navigation("EvaluateScores");

                    b.Navigation("User");
                });

            modelBuilder.Entity("be.Models.EvaluateScore", b =>
                {
                    b.Navigation("ProofImages");
                });

            modelBuilder.Entity("be.Models.EvaluationSchedule", b =>
                {
                    b.Navigation("PerformanceEvaluation");

                    b.Navigation("RoleEvaluationSchedules");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("be.Models.Grade", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("be.Models.Image", b =>
                {
                    b.Navigation("ProofImage");
                });

            modelBuilder.Entity("be.Models.Operation", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("be.Models.PerformanceEvaluation", b =>
                {
                    b.Navigation("Achievements");
                });

            modelBuilder.Entity("be.Models.Plant", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("be.Models.Position", b =>
                {
                    b.Navigation("BalanceScore");

                    b.Navigation("Employees");

                    b.Navigation("PositionEss");
                });

            modelBuilder.Entity("be.Models.Process", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("be.Models.Role", b =>
                {
                    b.Navigation("RoleEvaluationSchedules");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("be.Models.WorkingDetail", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
