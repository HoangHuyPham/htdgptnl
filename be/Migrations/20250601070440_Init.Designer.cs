// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using be.Contexts;

#nullable disable

namespace be.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250601070440_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("be.Models.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PerformanceEvaluationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Stretch")
                        .HasColumnType("real");

                    b.Property<float>("Target")
                        .HasColumnType("real");

                    b.Property<float>("Threshold")
                        .HasColumnType("real");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("PerformanceEvaluationId");

                    b.ToTable("Achievements");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b425352a-670d-49d5-a1b9-58be75e0c6b9"),
                            Name = "Core Value",
                            PerformanceEvaluationId = new Guid("0c237d95-af63-4d9c-a9c1-78b8285aa79c"),
                            Stretch = 120f,
                            Target = 100f,
                            Threshold = 80f,
                            Weight = 20f
                        });
                });

            modelBuilder.Entity("be.Models.AchievementItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AchievementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Stretch")
                        .HasColumnType("real");

                    b.Property<float>("Target")
                        .HasColumnType("real");

                    b.Property<float>("Threshold")
                        .HasColumnType("real");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AchievementId");

                    b.ToTable("AchievementItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ca16db53-40cb-44c8-8d6d-04c0afe20c06"),
                            AchievementId = new Guid("b425352a-670d-49d5-a1b9-58be75e0c6b9"),
                            Name = "Care",
                            Stretch = 120f,
                            Target = 100f,
                            Threshold = 80f,
                            Weight = 25f
                        },
                        new
                        {
                            Id = new Guid("48ded0fd-4850-4bfa-b084-5726017535ed"),
                            AchievementId = new Guid("b425352a-670d-49d5-a1b9-58be75e0c6b9"),
                            Name = "Accountability",
                            Stretch = 120f,
                            Target = 100f,
                            Threshold = 80f,
                            Weight = 25f
                        },
                        new
                        {
                            Id = new Guid("0fe22e23-be23-4290-94d3-33214dac7f6a"),
                            AchievementId = new Guid("b425352a-670d-49d5-a1b9-58be75e0c6b9"),
                            Name = "Resilience",
                            Stretch = 120f,
                            Target = 100f,
                            Threshold = 80f,
                            Weight = 25f
                        },
                        new
                        {
                            Id = new Guid("d34e1c45-3eff-4f95-8556-09ec73b13a5a"),
                            AchievementId = new Guid("b425352a-670d-49d5-a1b9-58be75e0c6b9"),
                            Name = "Elevating",
                            Stretch = 120f,
                            Target = 100f,
                            Threshold = 80f,
                            Weight = 25f
                        });
                });

            modelBuilder.Entity("be.Models.Criteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AchievementItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EvidenceRequired")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AchievementItemId");

                    b.ToTable("Criterias");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d629639-e01c-4f0f-94d6-ef33e6c615f8"),
                            AchievementItemId = new Guid("ca16db53-40cb-44c8-8d6d-04c0afe20c06"),
                            Content = "We believe that fundamentally, we are here to look after one another",
                            EvidenceRequired = false
                        },
                        new
                        {
                            Id = new Guid("04685700-23a3-4efa-8e46-b52f917f6b72"),
                            AchievementItemId = new Guid("ca16db53-40cb-44c8-8d6d-04c0afe20c06"),
                            Content = "We don't take ourselves too seriously and always follow the 'Golden Rule' of treating others like how you like to be treated;",
                            EvidenceRequired = false
                        },
                        new
                        {
                            Id = new Guid("2a115a54-dbcb-4402-9cb0-711eaad0d6de"),
                            AchievementItemId = new Guid("ca16db53-40cb-44c8-8d6d-04c0afe20c06"),
                            Content = "We believe in taking action every day, to help someone else.",
                            EvidenceRequired = false
                        },
                        new
                        {
                            Id = new Guid("8805eb52-693d-4794-8d67-77e8a57e3f29"),
                            AchievementItemId = new Guid("48ded0fd-4850-4bfa-b084-5726017535ed"),
                            Content = "We do what we say we'll do",
                            EvidenceRequired = false
                        },
                        new
                        {
                            Id = new Guid("4d4a5d3e-c354-4136-8268-b6927a95db88"),
                            AchievementItemId = new Guid("48ded0fd-4850-4bfa-b084-5726017535ed"),
                            Content = "We believe that whatever is rightly done, however humble, is noble",
                            EvidenceRequired = false
                        },
                        new
                        {
                            Id = new Guid("c774c619-e1f3-42ae-93f2-9fc87e4cea10"),
                            AchievementItemId = new Guid("48ded0fd-4850-4bfa-b084-5726017535ed"),
                            Content = "We take responsibility for the impact we have & take small steps for a better world",
                            EvidenceRequired = false
                        },
                        new
                        {
                            Id = new Guid("d347adf2-3ffe-4c3f-92e9-4974ee5da399"),
                            AchievementItemId = new Guid("0fe22e23-be23-4290-94d3-33214dac7f6a"),
                            Content = "When times are tough, we have the courage to step up",
                            EvidenceRequired = false
                        },
                        new
                        {
                            Id = new Guid("b9e84832-7e7e-4cba-85a5-3431c0919c82"),
                            AchievementItemId = new Guid("0fe22e23-be23-4290-94d3-33214dac7f6a"),
                            Content = "We don't lose., we only win or learn",
                            EvidenceRequired = false
                        },
                        new
                        {
                            Id = new Guid("a530ecea-77b7-4b5b-89fc-36331ed3aae6"),
                            AchievementItemId = new Guid("0fe22e23-be23-4290-94d3-33214dac7f6a"),
                            Content = "We believe that together, we are stronger",
                            EvidenceRequired = false
                        },
                        new
                        {
                            Id = new Guid("e2ebd762-ba04-4d6d-861f-92ed4ff1be56"),
                            AchievementItemId = new Guid("d34e1c45-3eff-4f95-8556-09ec73b13a5a"),
                            Content = "We believe in making things better and the continuous pursuit of knowledge",
                            EvidenceRequired = false
                        },
                        new
                        {
                            Id = new Guid("d120d2ca-8c89-4509-b09a-f57bfedbd271"),
                            AchievementItemId = new Guid("d34e1c45-3eff-4f95-8556-09ec73b13a5a"),
                            Content = "We believe in the direct link between developing our people, our community & our business",
                            EvidenceRequired = false
                        },
                        new
                        {
                            Id = new Guid("824d2d5a-6856-46fa-8e4d-91028a781e0f"),
                            AchievementItemId = new Guid("d34e1c45-3eff-4f95-8556-09ec73b13a5a"),
                            Content = "We are a meritocracy that believes in competency-based progression.",
                            EvidenceRequired = false
                        });
                });

            modelBuilder.Entity("be.Models.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0e46464-bfd9-4948-bac4-7e6cbf31bf9c"),
                            Name = "Engineer"
                        },
                        new
                        {
                            Id = new Guid("8622af63-705d-43b1-9ccd-76e26fef6cc2"),
                            Name = "Office"
                        });
                });

            modelBuilder.Entity("be.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupervisorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SupervisorId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f3f133bf-d083-43a3-adc5-ad4edc6a7d6f"),
                            SupervisorId = new Guid("4b756510-4c4a-47ab-9e7a-e996ef549b93"),
                            UserId = new Guid("ce7e4268-aaa1-48e4-8dc7-ef268ce8c93c")
                        },
                        new
                        {
                            Id = new Guid("4b756510-4c4a-47ab-9e7a-e996ef549b93"),
                            SupervisorId = new Guid("0f2824fd-2992-411a-84ca-8506a8ed4439"),
                            UserId = new Guid("29b7f60c-249e-4fbb-abaf-b6d13fa1adf2")
                        },
                        new
                        {
                            Id = new Guid("0f2824fd-2992-411a-84ca-8506a8ed4439"),
                            UserId = new Guid("34e07b8a-648b-4380-8872-dca827bc9524")
                        });
                });

            modelBuilder.Entity("be.Models.EmployeeDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Eligible")
                        .HasColumnType("bit");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GradeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OperationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PositionEId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("StartDate")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[EmployeeId] IS NOT NULL");

                    b.HasIndex("GradeId");

                    b.HasIndex("GroupId");

                    b.HasIndex("OperationId");

                    b.HasIndex("PlantId");

                    b.HasIndex("PositionEId");

                    b.HasIndex("ProcessId");

                    b.ToTable("EmployeeDetails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7c1eb0cf-110c-4547-850b-b6f08b3c0821"),
                            Code = "12345",
                            DepartmentId = new Guid("a0e46464-bfd9-4948-bac4-7e6cbf31bf9c"),
                            Eligible = true,
                            EmployeeId = new Guid("f3f133bf-d083-43a3-adc5-ad4edc6a7d6f"),
                            FullName = "",
                            OperationId = new Guid("cfba6725-9026-418b-b531-804a0f694de9"),
                            PlantId = new Guid("919d0deb-95d2-4889-a805-9a9e998c5618"),
                            PositionEId = new Guid("081dc95b-1662-480b-851d-1426d89a43bf"),
                            ProcessId = new Guid("17e774f9-62ae-4f1d-9f1d-750f2163f2b7"),
                            StartDate = 1655830800L,
                            Type = "IDL"
                        },
                        new
                        {
                            Id = new Guid("17b29b37-a852-4062-a512-a546ba7ebd4d"),
                            Code = "12346",
                            DepartmentId = new Guid("a0e46464-bfd9-4948-bac4-7e6cbf31bf9c"),
                            Eligible = true,
                            EmployeeId = new Guid("4b756510-4c4a-47ab-9e7a-e996ef549b93"),
                            FullName = "",
                            OperationId = new Guid("cfba6725-9026-418b-b531-804a0f694de9"),
                            PlantId = new Guid("c1b4d1b8-c087-4f3a-8a5f-a1f9b401434b"),
                            PositionEId = new Guid("081dc95b-1662-480b-851d-1426d89a43bf"),
                            ProcessId = new Guid("17e774f9-62ae-4f1d-9f1d-750f2163f2b7"),
                            StartDate = 1695229200L,
                            Type = "IDL"
                        },
                        new
                        {
                            Id = new Guid("e65b8dda-4164-4ea9-9c11-e6971ad183cf"),
                            Code = "12347",
                            DepartmentId = new Guid("a0e46464-bfd9-4948-bac4-7e6cbf31bf9c"),
                            Eligible = true,
                            EmployeeId = new Guid("0f2824fd-2992-411a-84ca-8506a8ed4439"),
                            FullName = "",
                            OperationId = new Guid("cfba6725-9026-418b-b531-804a0f694de9"),
                            PlantId = new Guid("919d0deb-95d2-4889-a805-9a9e998c5618"),
                            PositionEId = new Guid("984280b5-38f2-4b0f-8f4c-a5ec8fe41da6"),
                            ProcessId = new Guid("17e774f9-62ae-4f1d-9f1d-750f2163f2b7"),
                            StartDate = 1714669200L,
                            Type = "IDL"
                        });
                });

            modelBuilder.Entity("be.Models.EvaluationSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("End")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsSelfEvalution")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PerformanceEvaluationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Start")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PerformanceEvaluationId");

                    b.HasIndex("RoleId");

                    b.ToTable("EvaluationSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("98bafd56-2f3a-427c-be42-d188fb275e83"),
                            CreatedAt = 1748761480L,
                            Description = "Vui lòng đánh giá trước hạn, đánh giá của bạn sẽ bị vô hiệu nếu quá hạn",
                            End = 1749020680L,
                            IsSelfEvalution = true,
                            PerformanceEvaluationId = new Guid("0c237d95-af63-4d9c-a9c1-78b8285aa79c"),
                            RoleId = new Guid("30863c40-98e3-4813-a166-1dcfdb1b6b3c"),
                            Start = 1748761480L
                        },
                        new
                        {
                            Id = new Guid("c8a0d712-2844-451e-8f25-33d3ec2a3cd3"),
                            CreatedAt = 1748761480L,
                            Description = "Vui lòng đánh giá trước hạn, đánh giá của bạn sẽ bị vô hiệu nếu quá hạn",
                            End = 1749193480L,
                            IsSelfEvalution = false,
                            PerformanceEvaluationId = new Guid("0c237d95-af63-4d9c-a9c1-78b8285aa79c"),
                            RoleId = new Guid("756e37d5-f7ee-403d-bd82-f3265d3e0c91"),
                            Start = 1749020680L
                        },
                        new
                        {
                            Id = new Guid("1b66012c-92ee-47ab-977c-6ebcd53d5932"),
                            CreatedAt = 1748761480L,
                            Description = "Vui lòng đánh giá trước hạn, đánh giá của bạn sẽ bị vô hiệu nếu quá hạn",
                            End = 1749366280L,
                            IsSelfEvalution = false,
                            PerformanceEvaluationId = new Guid("0c237d95-af63-4d9c-a9c1-78b8285aa79c"),
                            RoleId = new Guid("50fa98a4-2c0c-4f1f-b23f-2790009d5612"),
                            Start = 1749193480L
                        });
                });

            modelBuilder.Entity("be.Models.EvaluationScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("CriteriaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<Guid?>("SourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SourceId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TargetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("SourceId");

                    b.HasIndex("SourceId1");

                    b.ToTable("EvaluationScores");
                });

            modelBuilder.Entity("be.Models.Evidence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EvaluationScoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("EvidenceRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationScoreId");

                    b.ToTable("Evidences");
                });

            modelBuilder.Entity("be.Models.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d7d6134-39c8-4a7e-a1c4-1667eaec30c8"),
                            Name = "as1"
                        },
                        new
                        {
                            Id = new Guid("6e6ec5e3-8495-4786-a44a-cf14c936afd6"),
                            Name = "as2"
                        });
                });

            modelBuilder.Entity("be.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2f6bf3a-ecea-4754-911a-19fdffc89132"),
                            Name = "Engineer"
                        },
                        new
                        {
                            Id = new Guid("5c607477-eed2-4018-938d-b9e2ce44f019"),
                            Name = "Costing"
                        });
                });

            modelBuilder.Entity("be.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EvidenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Size")
                        .HasColumnType("real");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EvidenceId")
                        .IsUnique()
                        .HasFilter("[EvidenceId] IS NOT NULL");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("be.Models.Operation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Operations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cfba6725-9026-418b-b531-804a0f694de9"),
                            Name = "Engineer"
                        },
                        new
                        {
                            Id = new Guid("e0421e47-b754-4722-a212-414af122dff4"),
                            Name = "Prototype"
                        });
                });

            modelBuilder.Entity("be.Models.PerformanceEvaluation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long>("End")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Start")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("PerformanceEvaluations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c237d95-af63-4d9c-a9c1-78b8285aa79c"),
                            CreatedAt = 1748761480L,
                            End = 1749366280L,
                            Name = "Don danh gia nhan vien 2025 (Behavior)",
                            Start = 1748761480L
                        });
                });

            modelBuilder.Entity("be.Models.Plant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Plants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("919d0deb-95d2-4889-a805-9a9e998c5618"),
                            Name = "plant 1"
                        },
                        new
                        {
                            Id = new Guid("c1b4d1b8-c087-4f3a-8a5f-a1f9b401434b"),
                            Name = "plant 2"
                        });
                });

            modelBuilder.Entity("be.Models.PositionE", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PositionEs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("081dc95b-1662-480b-851d-1426d89a43bf"),
                            Name = "Casegoods Drafter"
                        },
                        new
                        {
                            Id = new Guid("984280b5-38f2-4b0f-8f4c-a5ec8fe41da6"),
                            Name = "Casegoods Drafter Team Leader"
                        });
                });

            modelBuilder.Entity("be.Models.Process", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Processs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("17e774f9-62ae-4f1d-9f1d-750f2163f2b7"),
                            Name = "Engineer"
                        },
                        new
                        {
                            Id = new Guid("4942fab8-ba6c-4e1d-9682-7f854a261c5e"),
                            Name = "Prototype"
                        });
                });

            modelBuilder.Entity("be.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30863c40-98e3-4813-a166-1dcfdb1b6b3c"),
                            Description = "No description",
                            Level = 0,
                            Name = "Staff"
                        },
                        new
                        {
                            Id = new Guid("756e37d5-f7ee-403d-bd82-f3265d3e0c91"),
                            Description = "No description",
                            Level = 1,
                            Name = "LineManager"
                        },
                        new
                        {
                            Id = new Guid("50fa98a4-2c0c-4f1f-b23f-2790009d5612"),
                            Description = "No description",
                            Level = 2,
                            Name = "Director"
                        },
                        new
                        {
                            Id = new Guid("6d3b56e1-821b-43c9-83f2-af1a1566d097"),
                            Description = "No description",
                            Level = 3,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("be.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ce7e4268-aaa1-48e4-8dc7-ef268ce8c93c"),
                            Email = "nhanvien1@gmail.com",
                            Password = "$2a$11$Fym7WajUkdmJ31SAIj6UeO/TadSkRXXmoHwT/xKC/JhtrWSnpsfxW",
                            Phone = "123456789",
                            RoleId = new Guid("30863c40-98e3-4813-a166-1dcfdb1b6b3c"),
                            UserName = "nhanvien1"
                        },
                        new
                        {
                            Id = new Guid("29b7f60c-249e-4fbb-abaf-b6d13fa1adf2"),
                            Email = "quanly1@gmail.com",
                            Password = "$2a$11$yfVIdTsqxArm4nx7suWMKunV3BzXGrc3T1k9A88ZUriktZeLnaQ6W",
                            Phone = "123456789",
                            RoleId = new Guid("756e37d5-f7ee-403d-bd82-f3265d3e0c91"),
                            UserName = "quanly1"
                        },
                        new
                        {
                            Id = new Guid("34e07b8a-648b-4380-8872-dca827bc9524"),
                            Email = "giamdoc1@gmail.com",
                            Password = "$2a$11$JUZYOYbCRcdHLUohlvDZVezgS8HDfCFHKQqQn5zkGDKnMnrXKfdR.",
                            Phone = "123456789",
                            RoleId = new Guid("50fa98a4-2c0c-4f1f-b23f-2790009d5612"),
                            UserName = "giamdoc1"
                        });
                });

            modelBuilder.Entity("be.Models.WorkingDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActualWorkingDay")
                        .HasColumnType("int");

                    b.Property<Guid?>("EmployeeDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Hoic")
                        .HasColumnType("int");

                    b.Property<int>("Maternity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Np")
                        .HasColumnType("int");

                    b.Property<int>("Pv")
                        .HasColumnType("int");

                    b.Property<int>("StandardWorkingDay")
                        .HasColumnType("int");

                    b.Property<int>("Suspension")
                        .HasColumnType("int");

                    b.Property<int>("Verbal")
                        .HasColumnType("int");

                    b.Property<int>("Written")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeDetailId")
                        .IsUnique()
                        .HasFilter("[EmployeeDetailId] IS NOT NULL");

                    b.ToTable("WorkingDetails");
                });

            modelBuilder.Entity("be.Models.Achievement", b =>
                {
                    b.HasOne("be.Models.PerformanceEvaluation", "PerformanceEvaluation")
                        .WithMany("Achievements")
                        .HasForeignKey("PerformanceEvaluationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("PerformanceEvaluation");
                });

            modelBuilder.Entity("be.Models.AchievementItem", b =>
                {
                    b.HasOne("be.Models.Achievement", "Achievement")
                        .WithMany("AchievementItems")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Achievement");
                });

            modelBuilder.Entity("be.Models.Criteria", b =>
                {
                    b.HasOne("be.Models.AchievementItem", "AchievementItem")
                        .WithMany("Criterias")
                        .HasForeignKey("AchievementItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AchievementItem");
                });

            modelBuilder.Entity("be.Models.Employee", b =>
                {
                    b.HasOne("be.Models.Employee", "Supervisor")
                        .WithMany("Employees")
                        .HasForeignKey("SupervisorId");

                    b.HasOne("be.Models.User", "User")
                        .WithOne("Employee")
                        .HasForeignKey("be.Models.Employee", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Supervisor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("be.Models.EmployeeDetail", b =>
                {
                    b.HasOne("be.Models.Department", "Department")
                        .WithMany("EmployeeDetails")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("be.Models.Employee", "Employee")
                        .WithOne("Detail")
                        .HasForeignKey("be.Models.EmployeeDetail", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("be.Models.Grade", "Grade")
                        .WithMany("EmployeeDetails")
                        .HasForeignKey("GradeId");

                    b.HasOne("be.Models.Group", "Group")
                        .WithMany("EmployeeDetails")
                        .HasForeignKey("GroupId");

                    b.HasOne("be.Models.Operation", "Operation")
                        .WithMany("EmployeeDetails")
                        .HasForeignKey("OperationId");

                    b.HasOne("be.Models.Plant", "Plant")
                        .WithMany("EmployeeDetails")
                        .HasForeignKey("PlantId");

                    b.HasOne("be.Models.PositionE", "PositionE")
                        .WithMany("EmployeeDetails")
                        .HasForeignKey("PositionEId");

                    b.HasOne("be.Models.Process", "Process")
                        .WithMany("EmployeeDetails")
                        .HasForeignKey("ProcessId");

                    b.Navigation("Department");

                    b.Navigation("Employee");

                    b.Navigation("Grade");

                    b.Navigation("Group");

                    b.Navigation("Operation");

                    b.Navigation("Plant");

                    b.Navigation("PositionE");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("be.Models.EvaluationSchedule", b =>
                {
                    b.HasOne("be.Models.PerformanceEvaluation", "PerformanceEvaluation")
                        .WithMany("EvaluationSchedules")
                        .HasForeignKey("PerformanceEvaluationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("be.Models.Role", "Role")
                        .WithMany("EvaluationSchedules")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("PerformanceEvaluation");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("be.Models.EvaluationScore", b =>
                {
                    b.HasOne("be.Models.Criteria", "Criteria")
                        .WithMany("EvaluationScores")
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("be.Models.User", "Target")
                        .WithMany("EvaluationScoreTargets")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("be.Models.User", "Source")
                        .WithMany("EvaluationScoreSources")
                        .HasForeignKey("SourceId1");

                    b.Navigation("Criteria");

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("be.Models.Evidence", b =>
                {
                    b.HasOne("be.Models.EvaluationScore", "EvaluationScore")
                        .WithMany("Evidences")
                        .HasForeignKey("EvaluationScoreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("EvaluationScore");
                });

            modelBuilder.Entity("be.Models.Image", b =>
                {
                    b.HasOne("be.Models.Evidence", "Evidence")
                        .WithOne("Image")
                        .HasForeignKey("be.Models.Image", "EvidenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Evidence");
                });

            modelBuilder.Entity("be.Models.User", b =>
                {
                    b.HasOne("be.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("be.Models.WorkingDetail", b =>
                {
                    b.HasOne("be.Models.EmployeeDetail", "EmployeeDetail")
                        .WithOne("WorkingDetail")
                        .HasForeignKey("be.Models.WorkingDetail", "EmployeeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("EmployeeDetail");
                });

            modelBuilder.Entity("be.Models.Achievement", b =>
                {
                    b.Navigation("AchievementItems");
                });

            modelBuilder.Entity("be.Models.AchievementItem", b =>
                {
                    b.Navigation("Criterias");
                });

            modelBuilder.Entity("be.Models.Criteria", b =>
                {
                    b.Navigation("EvaluationScores");
                });

            modelBuilder.Entity("be.Models.Department", b =>
                {
                    b.Navigation("EmployeeDetails");
                });

            modelBuilder.Entity("be.Models.Employee", b =>
                {
                    b.Navigation("Detail");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("be.Models.EmployeeDetail", b =>
                {
                    b.Navigation("WorkingDetail");
                });

            modelBuilder.Entity("be.Models.EvaluationScore", b =>
                {
                    b.Navigation("Evidences");
                });

            modelBuilder.Entity("be.Models.Evidence", b =>
                {
                    b.Navigation("Image");
                });

            modelBuilder.Entity("be.Models.Grade", b =>
                {
                    b.Navigation("EmployeeDetails");
                });

            modelBuilder.Entity("be.Models.Group", b =>
                {
                    b.Navigation("EmployeeDetails");
                });

            modelBuilder.Entity("be.Models.Operation", b =>
                {
                    b.Navigation("EmployeeDetails");
                });

            modelBuilder.Entity("be.Models.PerformanceEvaluation", b =>
                {
                    b.Navigation("Achievements");

                    b.Navigation("EvaluationSchedules");
                });

            modelBuilder.Entity("be.Models.Plant", b =>
                {
                    b.Navigation("EmployeeDetails");
                });

            modelBuilder.Entity("be.Models.PositionE", b =>
                {
                    b.Navigation("EmployeeDetails");
                });

            modelBuilder.Entity("be.Models.Process", b =>
                {
                    b.Navigation("EmployeeDetails");
                });

            modelBuilder.Entity("be.Models.Role", b =>
                {
                    b.Navigation("EvaluationSchedules");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("be.Models.User", b =>
                {
                    b.Navigation("Employee");

                    b.Navigation("EvaluationScoreSources");

                    b.Navigation("EvaluationScoreTargets");
                });
#pragma warning restore 612, 618
        }
    }
}
